// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyDataBot.Bot.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MyDataBot.Bot.Data.Migrations
{
    [DbContext(typeof(BotDbContext))]
    [Migration("20230705130229_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.BotDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<int>("BotType")
                        .HasColumnType("integer");

                    b.Property<string>("QuotaId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<int?>("TelegramLimit")
                        .HasColumnType("integer");

                    b.Property<int?>("TelegramOffset")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramSecret")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("TelegramToken")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("QuotaId");

                    b.ToTable("Bots", (string)null);
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.IncomingMessageDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAiQuestion")
                        .HasColumnType("boolean");

                    b.Property<long?>("TelegramChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelegramUserName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.ToTable("IncomingMessages", (string)null);
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.IncomingMessageResponseDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<DateTime>("DateTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Delivered")
                        .HasColumnType("boolean");

                    b.Property<string>("IncomingMessageId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<int>("ResponseType")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.HasKey("Id");

                    b.HasIndex("IncomingMessageId")
                        .IsUnique();

                    b.ToTable("MessageResponses", (string)null);
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.QuotaDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<int>("AccessRule")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("DataFolder")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("FromUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessagesAllowed")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("ToUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Quotas", (string)null);
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.QuotaUserDbo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<int>("BotType")
                        .HasColumnType("integer");

                    b.Property<string>("QuotaId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("character varying(26)");

                    b.Property<string>("TelegramUserName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("QuotaId");

                    b.ToTable("QuotaUsers", (string)null);
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.BotDbo", b =>
                {
                    b.HasOne("MyDataBot.Bot.Data.Models.QuotaDbo", "Quota")
                        .WithMany("Bots")
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.IncomingMessageDbo", b =>
                {
                    b.HasOne("MyDataBot.Bot.Data.Models.BotDbo", "Bot")
                        .WithMany("Messages")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.IncomingMessageResponseDbo", b =>
                {
                    b.HasOne("MyDataBot.Bot.Data.Models.IncomingMessageDbo", "IncomingMessage")
                        .WithOne("Response")
                        .HasForeignKey("MyDataBot.Bot.Data.Models.IncomingMessageResponseDbo", "IncomingMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomingMessage");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.QuotaUserDbo", b =>
                {
                    b.HasOne("MyDataBot.Bot.Data.Models.QuotaDbo", "Quota")
                        .WithMany("Users")
                        .HasForeignKey("QuotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quota");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.BotDbo", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.IncomingMessageDbo", b =>
                {
                    b.Navigation("Response");
                });

            modelBuilder.Entity("MyDataBot.Bot.Data.Models.QuotaDbo", b =>
                {
                    b.Navigation("Bots");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
